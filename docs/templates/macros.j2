{% macro header(schema, scope, name, required) -%}
{# Generate the section to put at the top of an entity's page #}
    <div class="container">
        <p>
            <a href="index.html">CIDC Documentation</a>
        </p>
        <h1>
            {{ schema["title"] }}
            {% if "old" in name %}<b> OLD </b> {% endif %}
        </h1>
        <p>
            <b>Description:</b>  {{ schema["description"].replace("/n", "<br>") }}
        </p>
    </div>
{%- endmacro %}

{% macro uploads_table(scope, name, templates) -%}
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Entity</th>
            <th>Description</th>
        </tr>
        </thead>
        {% for entity_name, entity_schema in templates.items() %}
            <tr>
                <td width=25%>
                    <a href='{{ scope }}.{{ name }}.{{ entity_name }}.html'>
                        {{ entity_schema["title"] }}{% if "old" in name %} (OLD){% endif %}
                    </a>
                </td>
                <td>
                    {{ entity_schema["description"].replace("/n", "<br>") }}
                </td>
            </tr>
        {% endfor %}
    </table>
{%- endmacro %}

{% macro properties_table(schema, required) -%}
    {% set properties = [] %}
    {% set hasProperties = 'properties' in schema %}

    {% if hasProperties %}
        {% set _ = properties.extend(schema['properties'].items()) %}
    {% endif %}

    {% if not hasProperties %}
        {% set properties = schema.items() %}
    {% endif %}

    <table class="table table-striped">
        <thead>
        <tr>
            <th>Property</th>
            <th>Description</th>
            <th>Data Type</th>
        </tr>
        </thead>
        {% for prop_name, prop_schema in properties %}
            {# priortize those not nested_process_as_table and not nested_properties_table #}
            {# then required before not required #}
            {% if prop_schema is mapping and "process_as" not in prop_schema and ("type" in prop_schema or "const" in prop_schema or "url" in prop_schema or "type_ref" in prop_schema or "anyOf" in prop_schema) %}
                {% if prop_name in required %}
                    {{ property_table_row(prop_name, prop_schema, True) }}
                {% endif %}
            {% endif %}
        {% endfor %}
        {% for prop_name, prop_schema in properties %}
            {% if prop_schema is mapping and "process_as" not in prop_schema and ("type" in prop_schema or "const" in prop_schema or "url" in prop_schema or "type_ref" in prop_schema or "anyOf" in prop_schema) %}
                {% if prop_name not in required %}
                    {{ property_table_row(prop_name, prop_schema, False) }}
                {% endif %}
            {% endif %}
        {% endfor %}
        {% for prop_name, prop_schema in properties %}
            {% if prop_schema is mapping and "type" not in prop_schema and "const" not in prop_schema and "url" not in prop_schema and "type_ref" not in prop_schema and "anyOf" not in prop_schema %}
                {{ nested_properties_table(prop_name, prop_schema, required) }}
            {% elif prop_schema is mapping and "process_as" in prop_schema %}
                {{ nested_process_as_table(prop_name, prop_schema, required) }}
            {% endif %}
        {% endfor %}
    </table>
{%- endmacro %}

{% macro process_as_table(prop_schema) -%}
{# converted to dict {filename: definition} in generate_docs #}
<table class="table table-striped">
    <thead>
        <tr>
            <th>File name</th>
            <th>Description</th>
            <th>Data Type</th>
        </tr>
        </thead>
        {% for prop_schema in prop_schema["process_as"] %}
            <tr>
                <td>
                    {% if "relative_file_path" in prop_schema and prop_schema["description"] %}
                        {{ prop_schema["relative_file_path"] }}
                    {% elif prop_schema["merge_pointer"][0].isdigit() %}
                        {{ prop_schema["merge_pointer"][1:].replace("/", " ") }}
                    {% else %}
                        {{ prop_schema["merge_pointer"].replace("/", " ") }}
                    {% endif %}
                </td>
                <td width=55%>
                    {% if "description" in prop_schema and prop_schema["description"] %}
                        {{ prop_schema["description"].replace("/n", "<br>") }}
                    {% endif %}
                </td>
                <td>
                    {% if "url" in prop_schema %}
                        <a href="{{ prop_schema['url'].replace('artifacts.artifact_', 'files.').replace('clinical_data', 'assays.clinical_data').replace('assays.components.', '').replace('ngs_analyses', 'analyses') }}">
                            {{ prop_schema['url'].replace('artifacts.artifact_', '').replace('ngs_analyses', 'analyses').replace('.html', '').replace('assays.', '').replace('components.', '').replace("_"," ") }}
                        </a>
                    {% elif "type" in prop_schema %}
                        &lt; 
                            {{ prop_type_format(prop_schema) }}
                        &gt;
                    {% endif %}
                </td>
            </tr>
        {% endfor %}
    </table>
{%- endmacro %}

{%  macro nested_process_as_table(prop_name, prop_schema, required) -%}
<tr>
    <td colspan=3 class="container">
        <div class="accordion" id="{{ prop_name.replace(' ', '_') }}_accordion">
            <div class="card">
                <div class="card-header" id="{{ prop_name.replace(' ', '_') }}">
                    <div class="mb-0">
                        <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#{{ prop_name.replace(' ', '_') }}_card" aria-expanded="false" aria-controls="{{ prop_name.replace(' ', '_') }}_card">
                            {{ prop_name }}
                        </button>
                        {% if prop_name in required %}
                            <sup><mark>required</mark></sup>
                        {% endif %}
                        <div style="float: right;">
                            &lt; 
                                {{ prop_type_format(prop_schema) }}
                            &gt;
                        </div>
                    </div>
                </div>
                <div id="{{ prop_name.replace(' ', '_') }}_card" class="collapse" aria-labelledby="{{ prop_name.replace(' ', '_') }}">
                    <div class="card-body">
                        {% if "description" in prop_schema %}
                            {{ prop_schema["description"].replace("/n", "<br>") }}
                        {% endif %}
                        <br>
                        All files are
                        <sup><mark>required</mark></sup>
                        <br>
                        {{ process_as_table(prop_schema) }}
                    </div>
                </div>
            </div>
        </div>
    </td>
</tr>

{%- endmacro %}

{% macro nested_properties_table(prop_name, prop_schema, required) -%}
<tr>
    <td colspan=3 class="container">
        <div class="accordion" id="{{ prop_name }}_accordion">
            <div class="card">
                <div class="card-header" id="{{ prop_name }}">
                    <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#{{ prop_name }}_card" aria-expanded="false" aria-controls="{{ prop_name }}_card">
                        {{ prop_name }}
                    </button>
                    {% if prop_name in required %}
                        <sup><mark>required</mark></sup>
                    {% endif %}
                        <div style="float: right;">
                            &lt; 
                                {% if "items" in prop_schema %}
                                    array
                                {% else %}
                                    object
                                {% endif %}
                            &gt;
                        </div>
                </div>
                <div id="{{ prop_name }}_card" class="collapse" aria-labelledby="{{ prop_name }}">
                    <div class="card-body">
                        {% if "description" in prop_schema %}
                            {{ prop_schema["description"].replace("/n", "<br>") }}
                        {% endif %}
                        <br>
                        {{ properties_table(prop_schema, required) }}
                    </div>
                </div>
            </div>
        </div>
    </td>
</tr>
{%- endmacro %}

{% macro property_table_row(prop_name, prop_schema, required) -%}
<tr>
    <td>
        {% if "$ref" != prop_name %}
            <span id="{{ prop_name }}">
                {{ prop_name }}
            </span>
            {% if required %}
                <br><sup><mark>required</mark></sup>
            {% endif %}
        {% endif %}
    </td>
    <td width=55%>
        {% if "description" in prop_schema and prop_schema["description"] %}
            {{ prop_schema["description"].replace("/n", "<br>") }}
        {% endif %}
    </td>
    <td>
        {% if "type" in prop_schema %}
            &lt; 
                {{ prop_type_format(prop_schema) }}
            &gt;
            {% if "enum" in prop_schema %}
                <ul>
                    {% for item in prop_schema["enum"] %}
                        <li>{{ item | tojson }}</li>
                    {% endfor %}
                </ul>
            {% endif %}
            {% if "items" in prop_schema %} {# type: array #}
                <br>
                {% if "url" in prop_schema["items"] %}
                    <a href="{{ prop_schema['items']['url'].replace('artifacts.artifact_', 'files.').replace('clinical_data', 'assays.clinical_data').replace('assays.components.', '').replace('ngs_analyses', 'analyses') }}">
                        {{ prop_schema['items']['url'].replace('artifacts.artifact_', '').replace('.html', '').replace('assays.', '').replace('components.', '').replace("_"," ") }}
                    </a>
                {% else %}
                    {{ prop_type_format(prop_schema["items"]) }}
                {% endif %}
            {% endif %}
            {% if "pattern" in prop_schema %}
                as regex <br> <code>{{prop_schema["pattern"]}}</code>
            {% endif %}
        {% elif "const" in prop_schema %}
            &lt; const: <strong>{{ prop_schema["const"] }}</strong> &gt;            
        {% elif "url" in prop_schema %}
            <a href="{{ prop_schema['url'].replace('artifacts.artifact_', 'files.').replace('clinical_data', 'assays.clinical_data').replace('assays.components.', '').replace('ngs_analyses', 'analyses') }}">
                {{ prop_schema['url'].replace('artifacts.artifact_', '').replace('ngs_analyses', 'analyses').replace('.html', '').replace('assays.', '').replace('components.', '').replace("_"," ") }}
            </a>
        {% elif "type_ref" in prop_schema %} {# means we're in _template.json #}
            <a href="{{ prop_schema['type_ref'].replace('.json', '.html').replace('/', '.') }}">
                {{ prop_schema['type_ref'].replace('.json', '') }}
            </a>
        {% elif "anyOf" in prop_schema %}
            &lt; 
                any of
            &gt;
            <ul>
            {% for ref in prop_schema['anyOf'] %}
                <li>
                    <a href="{{ ref['url'].replace('artifacts.artifact_', 'files.').replace('clinical_data', 'assays.clinical_data').replace('assays.components.', '').replace('ngs_analyses', 'analyses') }}">
                        {{ ref['url'].replace('artifacts.artifact_', '').replace('ngs_analyses', 'analyses').replace('.html', '').replace('assays.', '').replace('components.', '').replace("_"," ") }}
                    </a>
                </li>
            {% endfor %}
            </ul>
        {% else %}
            (UNKNOWN DATA TYPE)
            {{ prop_schema }}
        {% endif %}
    </td>
</tr>
{%- endmacro %}

{% macro prop_type_format(prop_schema) -%}
    {% if prop_schema["type"] is iterable and (prop_schema["type"] is not string and prop_schema["type"] is not mapping) %}
        {% for type in prop_schema["type"] %}
            {{ type }}
            {% if type != prop_schema["type"][-1] %}, {% endif %}
        {% endfor %}
    {% else %}
        {{ prop_schema["type"] }}
    {% endif %}

    {% if "format" in prop_schema %} :  {{prop_schema["format"]}}{% endif %}
{%- endmacro %}


{% macro definitions_table(schema, required) -%}
    {% if 'definitions' in schema %}
        {% for def_name, def_schema in schema['definitions'].items() %}
            <h3>Definitions</h3>
            <h4 id=".{{ def_name }}">{{ def_name }}</h4>
            {{ properties_table(def_schema, required) }}
        {% endfor %}
    {% endif %}
{%- endmacro %}